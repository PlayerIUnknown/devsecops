name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run integration tests
      run: |
        pytest tests/test_main.py -v --tb=short
        
    - name: Build application
      run: |
        echo "Building application for staging deployment..."
        mkdir -p build/staging
        cp -r src/ build/staging/
        cp requirements.txt build/staging/
        echo "Build completed for staging"
        
    - name: Simulate staging deployment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment completed successfully!"
        echo "📊 Application is now running on staging"
        
    - name: Run staging health check
      run: |
        echo "🏥 Running health checks on staging..."
        echo "✅ All health checks passed!"
        
    - name: Upload staging artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build
        path: build/staging/
        if-no-files-found: warn

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run production tests
      run: |
        echo "🧪 Running production-specific tests..."
        pytest tests/ -v --tb=short
        echo "✅ All production tests passed!"
        
    - name: Build production application
      run: |
        echo "🏗️ Building application for production deployment..."
        mkdir -p build/production
        cp -r src/ build/production/
        cp requirements.txt build/production/
        echo "Production build completed"
        
    - name: Simulate production deployment
      run: |
        echo "🚀 Deploying to production environment..."
        echo "✅ Production deployment completed successfully!"
        echo "🌐 Application is now live in production"
        
    - name: Run production health check
      run: |
        echo "🏥 Running health checks on production..."
        echo "✅ All production health checks passed!"
        
    - name: Upload production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: build/production/
        if-no-files-found: warn
        
    - name: Create deployment summary
      run: |
        echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Successfully Deployed" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- All tests passed ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Health checks passed ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "🎉 Production deployment completed successfully!"
          echo "📧 Sending success notification..."
        else
          echo "❌ Production deployment failed!"
          echo "📧 Sending failure notification..."
        fi
        
    - name: Create deployment notification
      run: |
        echo "## 📢 Deployment Notification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "### ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "Production deployment completed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Failure" >> $GITHUB_STEP_SUMMARY
          echo "Production deployment failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi 